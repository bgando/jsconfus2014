
- firstname: Kassandra
  lastname: Perch
  visible: true
  smurl: http://twitter.com/kassandra_perch
  smtype: twitter
  smhandle: "kassandra_perch"
  title: Modular Application Architectures in Javascript
  body: >
    Web applications do not require an over-arching framework to be organized
    and maintainable. In fact, an application with modules from all over the
    place can in fact be maintainable, understandable, and encouraged. Instead
    of subscribing to one framework that provides developers with an entire
    slew of unused or unneeded functionality, an architecture can be built
    from the ground up using small modules from a variety of different sources.


    This kind of architecture is taking off in the Node community, and is
    starting to make its way in client-side javascript. This talk explores
    the differences between using a formal framework- like Ember, Backbone,
    Express, or Sails- and using a modular approach. Frameworks are not
    entirely out of the picture- there are a few examples of frameworks that
    encourage this kind of architecture by providing minimal structure in
    the right places. This talk will explore those frameworks, and the
    general ideas, benefits, and possible pitfalls of a modular architecture,
    from both the client and server-side perspective.
  bio: >
    Kassandra is a developer, crafter, and gamer living in Austin, TX. Her days
    are spent at RetailMeNot, where she slings javascript and tries to make
    developer processes easier. her nights and weekends are spent slinging more
    javascript, teaching for Girl Develop It!, and re-learning how to roller
    skate. She's an unrepentant JS addict- and is especially interested in JS
    robotics/hardware.

- firstname: Guillaume C.
  lastname: Marty
  visible: true
  smurl: https://twitter.com/g_marty
  smtype: twitter
  smhandle: g_marty
  title: Play DVDs in JavaScript for the sake of interoperability
  body: >
    We have everything we need to read DVD-video discs in a browser, so why
    don’t we start?


    For that purpose, I ported libdvdread and libdvdnav libraries to
    JavaScript so that we can parse the DVD-video info files and emulate
    a virtual machine.


    But this comes with technical challenges such as browsers being bad
    at manipulating huge files or not supporting the codecs used in DVD
    (MPEG-2, AC-3...). That’s why this port comes with a server in Node.js
    to circumvent these limitations.


    The resulting project is a mix of websockets, video elements, media
    source extensions and a lot of open source love.


    Get ready for a mind blowing demo!
  bio: >
    Guillaume is passionate about web technologies and loves hacking and
    building crazy things on top of open technologies. He's also
    fascinated by video games, animation, and, as a Japanese speaker,
    foreign languages.

- firstname: Forrest L.
  lastname: Norvell
  visible: true
  smurl: http://twitter.com/othiym23
  smtype: twitter
  smhandle: "othiym23"
  title: Learning ES6 as a Community
  body: >
    The current schedule for the completion of ECMAScript 6, the next version of
    JavaScript, dictates that the language specification be finished by the end
    of the second quarter of 2014. Most browser vendors have made informal
    commitments to have ES6 implemented by the end of the year. Over the last couple
    years, we've heard a lot about the many new features in ES6, along with the debate
    (and bickering) which has gone into its design. ES6 stands to be the most substantial
    change to JavaScript since ES4 (which didn't work out that great, as most users of
    ES5 are aware).


    With this much change comes a lot of complexity. Many of the new features
    (like generators or proxies) are powerful, basic abstractions, and as such
    combine in complex (and potentially unexpected) ways. In many ways, a new version
    of JavaScript offers the possibility of returning us to the wild frontier days
    that JavaScript only recently left behind, with library and framework vendors each
    choosing their own combinations of features to build powerful (and complicated)
    architectures that can really only be understood on their own terms.


    However, as a community we've learned a lot over the last half decade or so, and
    I think we've learned how to tackle this problem head on. I've come up with a
    strategy that I think would allow us to collaboratively get to a good place with
    ES6 relatively quickly. I'll go over this strategy and point to the areas where
    I think we ought to spend the most time to get the most positive results.


    It's up to us – as a community of designers, developers, and implementors – to
    get out in front and provide tooling, documentation, and training that will
    help ourselves use these new features effectively, before folklore and superstition
    start to take root. And it's important to remember that finishing ES6 frees the
    JavaScript standards bodies to concentrate on ES7, where our feedback from using
    ES6 will help them refine what comes next.
  bio: >
    Forrest has been a web developer since 1994, a semi-enthusiastic JavaScript user since 1997, a more enthusiastic AJAX developer since 2007, and a full-time Node.js developer since 2011. He built New Relic's instrumentation for Node.js, which required him to learn all of the JavaScript and then use it to do horrible, yet effective, things to write a performance monitor for Node in 100% pure JavaScript.

- firstname: James
  lastname: Long
  visible: false
  smurl: http://twitter.com/jlongster
  smtype: twitter
  smhandle: jlongster
  title: Unshackling JavaScript with Macros
  body: >
    JavaScript is thriving, but the language itself is shackled to the
    long process of ECMA standardization and implementation in all
    engines. We have to wait many years for a simple feature like variable
    destructuring.


    Macros allow you to extend a language with new syntax and semantics,
    just like you would build new APIs on top of native ones. There's no
    reason the language itself shouldn't be extensible, which allows it to
    grow naturally.


    sweet.js is a project that implements robust hygienic macros for
    JavaScript. I will explain how this works and why it's such an
    exciting idea. I will show how you can already have ES6 variable
    destructuring, classes, fat arrow syntax, and more just with a few
    macros. In addition, you can use things like function tracing, native
    pattern matching, better assertions (logs contain the original
    expression), and much more. sweet.js macros track the original source
    location and generates sourcemaps, so debug away like normal! Let's
    unshackle ourselves from the mire of standardization, and take control
    of the language we love!
  bio: >
    I love programming language research, and hack on compilers and games
    in my free time. During the day I work for Mozilla on the Developer
    Tools. I achieved the ultimate yak-shave: spent 3 months building my
    own desk before I could work on some code.

- firstname: David
  lastname: Nolen
  visible: false
  smurl: http://twitter.com/swannodette
  smtype: twitter
  smhandle: "swannodette"
  title: "Immutability: Putting The Dream Machine To Work"
  body: >
    We live in a time of vast computational resources - many of us
    carry around in our pockets what just thirty years ago would have been
    considered a supercomputer. But it's not just the hardware, these bite
    sized supercomputers run software using state of the art dynamic
    compilation techniques to deliver stellar performance without
    sacrificing flexibility.


    While all of this may sound incredibly futuristic, many of us still
    program these Dream Machines with miserly techniques not far removed
    from the best practices of the 1960s.


    We have cycles to spare, by investing some of them into immutable data
    structures our programs get new wonderful properties that enable us to
    design solutions at a much higher level of abstraction. Om is a new
    library I've created just to explore these possibities. While Om itself
    is written in ClojureScript, we'll focus primarily on the big ideas
    present in Om all of which are easily portable to JavaScript.

  bio: >
    David Nolen is a JavaScript developer for the New York Times. He enjoys
    making music, writing JavaScript, writing ClojureScript, and exploring new
    approaches to user interface programming.

- firstname: Mark
  lastname: DiMarco
  visible: true
  smurl: http://github.com/markmarkoh
  smtype:  github
  smhandle: "markmarkoh"
  title: User Interface Algorithms
  body: >
    Even something as simple as a dropdown menu or a bar graph can introduce usability problems. From a slide out menu disappearing when a user's mouse moves a few pixels too far, to requiring NASA-like levels of precision to mouse over the right element, there are algorithms already implemented in Javascript to help us overcome these problems.
    If an algorithm is defined as "a step-by-step procedure for calculations", let's visually break down those steps for 2 different non-trivial algorithms and explore how these algorithms are applied to some standard & everyday user interface patterns. We'll first look at an algorithm for predicting a user's intentions by calculating mouse speed and direction, and then tackle determining hit state for hundreds of non-uniformed, variably sized and placed UI elements.
  bio: >
    [Mark DiMarco](http://work.markmarkoh.com/) is a Senior UI Engineer at Bazaarvoice in Austin, TX. He spends
    his free time working on [DataMaps](http://datamaps.github.io/), attempting to master the art of brewing coffee,
    and [taking photos](http://500px.com/markmarkoh) with his favorite piece of technology (a Nikon D600).

- firstname: Nick
  lastname: Bray
  visible: true
  smurl: https://plus.google.com/u/0/112308070441027147599/posts
  smtype: google-plus
  smhandle:
  title: Native Code on the Web?
  body: >
    What will it take for native code to become part of the web platform?  The web platform
    has many wonderful qualities, but easy interoperability with other platforms is not
    one of them.  Do you want to simultaneously develop for both native mobile and the web?
    Or use an awesome library in your web app, but it’s written in C++?  Well... you can.
    Almost.  Maybe.  Sometimes.  Sort of.  Many disclaimers and restrictions apply.
    But what will it take for the answer to just be "yes"?


    This talk will dive deep into the world of native code on the web, compiling C++ into
    JavaScript, and look at the gaps that need to be filled.  A number of intertwined topics
    will be touched on, including: Emscripten, PNaCl, pepper.js, JS VM and browser internals,
    web workers, nitty-gritty details of JavaScript and C++, multi-threaded programming, and
    the horror of memory models.  All will be explained, as long as you’re willing to take the plunge.
  bio: >
    Nick is a software engineer working on Chrome at Google.  He is the author of pepper.js,
    a library that allows Native Client applications to be compiled into JavaScript. He is
    currently trying to figure out how to make native code work on the web, and make it work well.
    In his spare time he thinks about compilers, domain-specific languages, and good chocolate.

- firstname: Christoph
  lastname: Burgmer
  visible: false
  smurl: http://github.com/cburgmer
  smtype: github
  smhandle: cburgmer
  title: Hacking a HTML renderer in plain browser-side JS
  body: >
    TBD
  bio: >
    I love building things around software. Much of it in JavaScript for the web.
    You'll find me hacking on Open Source while either contributing here, or
    starting new stuff there. Apart from that, I love languages.

- firstname: Kawandeep
  lastname: Virdee
  visible: true
  smurl: http://twitter.com/whichlight
  smtype: twitter
  smhandle: "whichlight"
  title: "Open Web Art: JavaScript for Interactive, Collaborative, and Hackable Art"

  body: >
    Interactive art can be a powerful means to inspire conversations, creativity,
    and wonder among groups of people. It is now easier to build interactive and
    collaborative apps with JavaScript, and these features can be used for expressive
    works.  I'll describe using JS to make web art, as well as installation and
    projection art.  Because of web standards as well as browser performance
    improvements, you can make JS art that is accessible on a variety of platforms.
    The openness of the JavaScript community inspires the openness of creative coding
    in JavaScript, producing works that invite exploration, learning, and hacking.
  bio: >
    Kawandeep Virdee is an open web artist, immensely inspired by the sharing
    and collaboration of the JavaScript community. He uses technology and art
    to explore ways we can create meaning and joy collectively. At Embedly, he
    is a product designer and developer advocate. He is co-founder of the public
    art group New American Public Art, which has installed interactive work
    around Boston and the US. He is a trustee of the Boston chapter of the
    Awesome Foundation, advocating for works involving open technology and
    public joy. Tech art talks and workshops include the Art Institute of
    Boston, MIT, Betascape, the Newcastle Connected Communities Symposium, and
    Robotsconf. He blogs at [blog.whichlight.com](http://blog.whichlight.com)
    and cultivates the tech art scene around Boston through Boston Creative
    Coders.

- firstname: Guy
  lastname: Bedford
  visible: true
  smurl: http://twitter.com/guybedford
  smtype: twitter
  smhandle: "guybedford"
  title: Package Management for ES6 Modules
  body: >
    How does the transition into ES6 modules work for browsers exactly? How do
    we enable modular version-managed front-end architecture in the process?


    [jspm](http://jspm.io) provides almost-magical package management for JavaScript
    built around the principles of version-managed ES6-modules and the dynamic ES6 module
    loader from the core.


    In short, jspm starts off by making ES6 modules work dynamically in browsers today
    through the dynamic ES6 Module Loader polyfilll, then we make all existing module
    formats work through this same loader, then then we add offline build workflows
    for production and a command-line package manager to allow modular dependency management.
    Finally turn the whole thing around and add a CDN with server-push, and you have
    install-free version-managed module loading in the browser.
  bio: >
    Guy is currently working on a number of open source projects relating to
    module loading and package management in the browser.  He is the author of
    jspm and SystemJS, and co-authored the ES6 Module Loader polyfill. Based in
    Cape Town, South Africa, he also enjoys spending time in the US and works
    as a freelance web developer.

- firstname: Jake
  lastname: Verbaten
  visible: true
  smurl: http://twitter.com/Raynos
  smtype: twitter
  smhandle: "Raynos"
  title: NPM-style Frontend
  body: >
    This talk is about a modular frontend which is an approach not common to most frontend developers. No jQuery, no frameworks. Instead many small, simple abstractions are used, published to npm and bundled with browserify.


    The NPM-style frontend prefers modularity and simple abstractions that do one thing well.  THis talk includes:

     * Various approaches to creating standalone "components" or "widgets" that are published to npm, including styles & templates.
     * How to compose various modules together to build your own "framework" with your own trade offs.
     * How to compose an application from smaller applications
     * Build small UI components with thin interfaces that you glue together in your application.


    Your entry point is small, containing the minimal glue code and each UI component addresses its own concerns.
  bio: >
    Raynos is a Javascript Hacker, author of over 250 modules on npm. In his
    spare time he works on all kind of projects from writing server-less
    application on top of WebRTC to implementing FRP in javascript. As a big fan
    of node.js do one thing well philsophy he's been conquering web development
    one small module at a time.

- firstname: Nico
  lastname: Bevacqua
  visible: true
  smurl: http://twitter.com/nzgb
  smtype: twitter
  smhandle: "nzgb"
  title: Front End Ops Tooling
  body: >
    This talk covers build tooling, processes, and your development workflow. You'll
    get a glimpse as to why you should be building, and why you should put together a
    build process from the get-go. Then we'll move on to tooling. Here I'll discuss
    some of the most popular JavaScript build tools, namely Grunt, Gulp, and npm.


    We'll investigate how each one performs for certain tasks, and I'll help you forge
    your own build sword. Lastly, I'll discuss the benefits of going for the module
    format Node.js uses, which is Common.js, and how you can leverage those modules
    in the browser, using a tool called Browserify.
  bio: >
    Nico is an enthusiastic full-stack developer based in Buenos Aires,
    Argentina, where he spends his days with the love of his life. When he's not
    hacking as a full stack developer, Nico spends his time writing content for
    [Pony Foo](http://blog.ponyfoo.com); or his upcoming book, named
    [JavaScript Application Design](http://bevacqua.io/bf). Nico is a happy
    pony, and you can find him as [@nzgb](http://twitter.com/nzgb) on Twitter,
    because xkcd.

- firstname: Ryan
  lastname: Florence
  visible: true
  smurl: http://twitter.com/ryanflorence
  smtype: twitter
  smhandle: "ryanflorence"
  title: Embularactymerbone
  body: >
    Ember, Angular, React, Polymer, and Backbone. Following in
    jQuery's footsteps, these projects (and others) are helping to drive
    some future APIs in the browser.


    While they all get lumped into the category "Frontend MVC", an intimate
    look at each reveals they are quite different. These stark and subtle
    differences matter when choosing one for your project.


    In this session, you'll see each project's sweet spot, and where each
    struggles. You'll get a healthy dose of code as we explore the primary
    APIs. You will walk away with a better understanding of the goals and
    intended use-cases for each project.
  bio: >
    I'm a software engineer from Salt Lake City, Utah and have been creating
    websites since the early 90's. I like making awesome user experiences and
    leaving behind maintainable code. I'm active in the JavaScript community
    writing plugins, contributing to popular JavaScript libraries, speaking at
    conferences & meet-ups, and writing about it on the web. I work as the
    JavaScript guy at Instructure.

- firstname: Spike
  lastname: Brehm
  visible: true
  smurl: http://twitter.com/spikebrehm
  smtype: twitter
  smhandle: "spikebrehm"
  title: Building Isomorphic Apps
  body: >
    After building more and more rich and complex JavaScript apps at Airbnb,
    we started to see the single-page app approach break down.  The language
    and environment barriers between our Rails server and fat client app caused
    code duplication and the lack of server-side rendering led to slow initial
    page load performance and SEO headaches.


    The dream of a shared UI layer and reusable business logic led us to start
    experimenting with ways to bring these apps back to the server.  We started
    by converting our mobile web site, a Backbone app, to also run on Node.js and
    Express, which led to the open-source Rendr library.  Since then we’ve learned
    a lot and have begun to refine our understanding of "isomorphic JavaScript".


    There are a wide range of approaches which might be considered
    "isomorphic" — an app could share just a few tiny modules of business logic, or
    just templates, or route definitions; or it might try to share the entire application code.
    The more code that is shared, the more abstractions have to be built to shim the differences
    between the very dissimilar environments of web browser and server, and the more
    complex and tightly-coupled the result will be.


    This talk will give some broader context for isomorphic JavaScript, show some real world
    examples, explain common application patterns for isomorphic apps, and then dive into the
    open-source tools and libraries that you can use to build isomorphic apps: libraries like
    Handlebars and Superagent and build tools like Browserify and Esprima.
  bio: >
    Spike Brehm is a web engineer at Airbnb. He's currently prototyping the
    next generation of Airbnb's front end stack, tackling the problem of
    \isomorphic JavaScript\ -- building apps that have the flexibility to run
    on both the client and server using the same codebase. When not busy
    maintaining Rendr, Airbnb's library for isomorphic JavaScript apps, Spike
    spends his time enjoying San Francisco.

- firstname: Marco
  lastname: Rogers
  visible: true
  smurl: http://twitter.com/polotek
  smtype: twitter
  smhandle: "polotek"
  title: Finding Patterns Across Front-end Frameworks
  body: >
    We're all building a client-side framework. And they're all different implementations
    of the same stuff. I want to compare the approaches that popular frameworks take to
    solving these patterns. If they even try to solve them at all. I also want to include
    info about the custom framework that Yammer uses. It'll be illustrative to see how all
    of these have different approaches to the same set of patterns.
  bio: >
    Marco is an engineer who loves building things for the web. He's been doing
    server-side javascript since before it was cool (and before it was node).
    But he spends most of his time in the browser these days as Front-end
    Engineering Lead at Yammer. You can find him as
    [@polotek](http://twtiter.com/polotek) almost everywhere online. He also
    tweets occasionally.

- firstname: Ryan
  lastname: Paul
  visible: false
  smurl: http://twitter.com/segphault
  smtype: twitter
  smhandle: "segphault"
  title: MontageJS, a component-oriented, CommonJS/npm based MVC framework.
  body: >
    TBD
  bio: >
    Ryan Paul is head of Developer Relations at Montage Studio, a startup dedicated
    to helping developers build large frontend Web applications with reusable
    components. He is a Linux enthusiast and open source software developer.
    Ryan also writes articles about software development for Ars Technica, a popular
    technology news site.

- firstname: Brian J.
  lastname: Brennan
  visible: false
  smurl: http://twitter.com/brianloveswords
  smtype: twitter
  smhandle: "brianloveswords"
  title:
  body: >
  bio: >
    Brian is a bassist, an event organizer of BrooklynJS, a mentor of NodeSchool,
    and a cat owner. When he's not being one of those other things, he's a software
    architect at Mozilla working on the OpenBadges project

- firstname: Bodil
  lastname: Stokke
  visible: false
  smurl: http://twitter.com/bodil
  smtype: twitter
  smhandle: "bodil"
  title: TBD
  body: >
    TBD
  bio: >
    Bodil is a compulsive conference speaker in the fields of functional programming
    and internets technologies, and is a co-organiser of multiple developer conferences
    in Scandinavia and the UK, mostly because she’s still learning how to stop. She is a
    prolific contributor to the Free Software community, and has recently taken up
    designing new programming languages as a hobby. In her spare time, she works as a
    developer for Future Ad Labs, a London based startup that wants to make advertising
    a productive member of society. Her favourite pony is Pinkie Pie.

- firstname: David
  lastname: Calhoun
  visible: true
  smurl: http://twitter.com/franksvalli
  smtype: twitter
  smhandle: "franksvalli"
  title: Realtime Satellite Tracking in the Browser
  body: >
    In 1980 the United States Department of Defense (DoD) released the equations and source
    code used to predict the positions of satellites around the Earth.  These simplified
    perturbations models (SGP4) were originally written in FORTRAN IV and have since been
    ported to C++, Java, MATLAB, and Pascal.  And now, with a JavaScript port, it's time to
    bring satellite tracking to the browser!


    In this talk we'll learn how to use existing tools to calculate and plot realtime
    satellite positions on a map using Leaflet.js and satellite.js.  Along the way we'll
    sneak in some orbital mechanics concepts, minus a lot of the hardcore math.


    Perturbations, polar orbits, orbital eccentricity, Kepler’s laws, orbital propagation,
    oh my!


    We will also learn about the pitfalls of 2D map projections, and why a 3D projection
    is more accurate and intuitive.  If there's time, we'll go one step further and build
    a 3D satellite tracker using WebGL.
  bio: >
    David Calhoun is a UI engineer working at Skybox Imaging in Mountain View, using open web technology to build interfaces for satellite imagery and video processing, a satellite imagery scheduling interface, and a websocket-powered telemetry dashboard.  Prior to that he's worked on the Node.js-backed CNET mobile website, as well as Yahoo! Mobile.  He also occasionally contracts for WebMocha.
    Most recently he's lived in Kyoto, Japan for a year, which was an amazing and humbling experience.
    He tweets at @franksvalli and writes longer stuff at ([davidbcalhoun.com](http://davidbcalhoun.com)), and was even once lucky enough to be published in Web Performance Daybook Volume 2.

- firstname: Jenn
  lastname: Turner
  visible: true
  smurl: http://twitter.com/renrutnnej
  smtype: twitter
  smhandle: "renrutnnej"
  title: Lessons in Emotional Safety FTW
  body: >
    Emotional safety is the most important predictor of the health of an organization and a community.
    But more importantly, it has a enduring repercussions on our lives as individuals.
    Like, our real lives—the ones we live for our whole lives.


    I've worked in intensely unsafe professional environments prior to joining the team at [&yet](https://andyet.com/).
    I'd like to candidly share some of the lessons I've learned from my unique perspective as a female who isn't a
    software developer but who spends much of her life around them
    (including co-organizing events like RealtimeConf, RedisConf, and TriConf).


    Being "in the developer world but not of it" has given me perspective to identify blind spots within
    our culture as a company and a community. Traditionally copywriters on a software team are viewed as a
    supporting role: we help sell what gets made. But what if all contributors to a team were true equals
    capable of leading and shaping a continuously improving company culture? That's the foundation of emotional safety.

  bio: >
    By day, Jenn works at [&yet](http://andyet.com) as the Chief Jenn Officer,
    contributing to the departments of marketing, design, editorial, internal
    affairs, conference organization, awesome, and user experience.


    By night, she spends her time tweeting sporadically as
    [@renrutnnej](http://twitter.com/renrutnnej), starts the beginnings of many,
    many side projects, conducts mini-experiments with code, and hangs out with
    her two favorite people in the whole world wide web: Lee and Mila.

- firstname: Travell
  lastname: Perkins
  visible: false
  smurl:
  smtype:
  smhandle:
  title:
  body: >
  bio: >
    Travell is a classically trained computer scientist; he tries to go beyond just getting things working. He has skills and passion in the areas of financial services, consumer internet, digital media, cloud computing, sustainability, and everything startups.
    Travell is currently the CTO of Fidsafe, an online safe deposit box offered by Fidelity. Travell has been hacking since he was in the 6th grade.  He holds degrees in computer science and business from MIT and BU respectively.

- firstname: Neil
  lastname: Green
  visible: false
  smurl:
  smtype:
  smhandle:
  title: Writing Custom DSLs
  body: >
  bio: >
    Neil works as a lead developer at IntercontinentalExchange (ICE), a
    financial and commodities exchange.   He is the UI architect of ICE's
    social, messaging, and app integration platform, and lead implementer of the
    platform's core systems.   Neil's true passion lies in coaching engineers on
    the practical application of software engineering and architectural design
    principles through coding competitions and extreme code reviews.   He finds
    it amusing that Java developers are celebrating the arrival of lambdas 15
    years after JavaScript had them.  In his spare time, Neil channels his
    appreciation for caffeine into the daily refactoring of his French pressed
    coffee making technique.

- firstname: Jenn
  lastname: Schiffer
  visible: false
  smurl: https://twitter.com/jennschiffer
  smtype: twitter
  smhandle: "jennschiffer"
  title: "What's the Harm In Sorting: Sanitizing Inputs For More Optimized JavaScript"
  body: >
    NaN
  bio: >
    Jenn Schiffer is a web developer. From the early age of 37 she held the
    amulet of scripts from which the soul of the Node baby cries. The noises
    had awoken the spirits from whic
